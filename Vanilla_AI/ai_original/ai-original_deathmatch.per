
;goals 1 and 2 = boats
;goal 3 = groups
;goal combat-arm = his unique unit type (also loads correct upgrades)
;goal 36 = good troops -- 36 NO = don't build, YES = build, 
;       2 = only build if we don't have a govtctr. 
;goal 37 = good mech2
;goal 38 = good mech3
;goal 39 = good fighters

;starting goals
(defrule
        (true)
=>
        (set-goal military-parity YES)  ;goal 3
        (set-goal attack-control NO)    ;goal 4
        (set-goal need-deathmatch-villagers NO) ;goal 7

        (set-goal secondary-build 1)    ;goal 8
        (set-goal soldiers-available NO);goal 10
        (set-goal attack-enabled YES)   ;goal 13
        (set-goal age-advancement NO)   ;goal 14

        (set-goal make-warboat NO)              ;goal 15
        (set-goal upgrade-conflict NO)  ;goal 16
        (set-goal resource-needed NOVA)

        (disable-self)
)

(defrule
        (true)
=>
        (set-goal pre-unique-arm NO)    ;goal 17
        (set-goal wonder-attempt MAYBE) ;goal 20
        (set-goal sea-owner NO)                 ;goal 23
        (set-goal enemy-soldiers NO)    ;goal 26
        (set-goal siege-available YES)  ;goal 34
        (set-goal 36 YES)                               
        (set-goal switch-laser-mounted TROOPS)  ;goal 71
        (disable-self)
)

(defrule
        (true)
        =>
        (enable-timer t-chatmore 1)
        (disable-self)
)

#load-if-not-defined GUNGANS
#load-if-not-defined WOOKIEES
#load-if-not-defined FEDERATION

(defrule
        (true)
        =>
        (set-goal jedi-rating GOOD)
        (disable-self)
)

#end-if
#end-if
#end-if

#load-if-not-defined REBEL
#load-if-not-defined EMPIRE
#load-if-not-defined NABOO

(defrule
        (true)          
        =>
        (set-goal jedi-rating POOR)
        (disable-self)
)

#end-if
#end-if
#end-if

;; sn-homebase ;;

(defrule
        (strategic-number sn-number-explore-groups != 1)
=>
        (set-strategic-number sn-number-explore-groups 1)
        (set-strategic-number sn-minimum-explore-group-size 1)
        (set-strategic-number sn-maximum-explore-group-size 1)
        (disable-self)
)

(defrule
        (goal wall-build YES)
        (wall-invisible-percentage 2 > 0)
=>
        (set-strategic-number sn-blot-exploration-map 1)
)

#load-if-defined DIFFICULTY-EASIEST
(defrule
        (true)
=>
        (set-strategic-number sn-percent-enemy-sighted-response 10)
        (set-strategic-number sn-consecutive-idle-unit-limit 60)
        (set-strategic-number sn-easiest-reaction-percentage 20)
        (set-difficulty-parameter ability-to-maintain-distance 100)
        (set-difficulty-parameter ability-to-dodge-missiles 100)
        (disable-self)
)
#end-if
;********************************
#load-if-defined DIFFICULTY-EASY
(load "ai-original\ai-original_tower")

(defrule
        (true)
=>
        (set-strategic-number sn-percent-enemy-sighted-response 25)
        (set-strategic-number sn-consecutive-idle-unit-limit 20)
        (set-strategic-number sn-easier-reaction-percentage 20)
        (set-strategic-number sn-hits-before-alliance-change 50)
        (set-difficulty-parameter ability-to-maintain-distance 75)
        (set-difficulty-parameter ability-to-dodge-missiles 75)
        (disable-self)
)
#end-if

;********************************
#load-if-defined DIFFICULTY-MODERATE
(load "ai-original\ai-original_tower")
(load "ai-original\ai-original_monument")

(defrule
        (true)
=>
        (set-strategic-number sn-percent-enemy-sighted-response 75)
        (set-strategic-number sn-consecutive-idle-unit-limit 5)
        (set-strategic-number sn-hits-before-alliance-change 25)
        (set-difficulty-parameter ability-to-maintain-distance 50)
        (set-difficulty-parameter ability-to-dodge-missiles 50)
        (disable-self)
)
#end-if

;********************************
#load-if-defined DIFFICULTY-HARD
(load "ai-original\ai-original_tower")
(load "ai-original\ai-original_monument")

(defrule
        (true)
=>
        (set-strategic-number sn-attack-winning-player 0)
        (set-strategic-number sn-attack-winning-player-factor 60)
        (set-strategic-number sn-percent-enemy-sighted-response 99)
        (set-strategic-number sn-consecutive-idle-unit-limit 1)
        (set-strategic-number sn-hits-before-alliance-change 10)
        (set-difficulty-parameter ability-to-maintain-distance 0)
        (set-difficulty-parameter ability-to-dodge-missiles 0)
        (disable-self)
)
#end-if

;********************************
#load-if-defined DIFFICULTY-HARDEST
(load "ai-original\ai-original_tower")
(load "ai-original\ai-original_monument")

(defrule
        (true)
=>
        (set-strategic-number sn-attack-winning-player 0)
        (set-strategic-number sn-attack-winning-player-factor 99)
        (set-strategic-number sn-percent-enemy-sighted-response 99)
        (set-strategic-number sn-hits-before-alliance-change 10)
        (set-difficulty-parameter ability-to-maintain-distance 0)
        (set-difficulty-parameter ability-to-dodge-missiles 0)
        (disable-self)
)
#end-if
;********************************
;********************************

(defrule
        (cc-players-building-type-count any-enemy BLDG-GOVTCTR == 0)
=>
        (set-goal rush-control RUSHING)
)

(defrule
        (goal rush-control RUSHING)
        (cc-players-building-type-count every-enemy BLDG-GOVTCTR > 0)
=>
        (set-goal rush-control NO)
)

;========================TL1 RULES
(defrule
        (true)
=>
        (set-strategic-number sn-coop-share-information 1)
        (set-strategic-number sn-coop-share-attacking 1)
        (set-strategic-number sn-maximum-town-size imperial-town-size)

        (set-strategic-number sn-task-ungrouped-soldiers 0)
        (set-strategic-number sn-zero-priority-distance 250)
        (set-strategic-number sn-blot-exploration-map 0)

        (set-strategic-number sn-attack-intelligence 1)
        (set-strategic-number sn-gather-defense-units 1)
        (set-strategic-number sn-defense-distance 2)

        (set-strategic-number sn-maximum-gaia-attack-response 1)
        (set-strategic-number sn-ignore-attack-group-under-attack 1)
        (set-strategic-number sn-allow-civilian-defense 0)

        (disable-self)
)

(defrule
        (true)
=>
        (set-strategic-number sn-metal-dropsite-distance 3)
        (set-strategic-number sn-nova-dropsite-distance 3)
        (set-strategic-number sn-retask-gather-amount 20)
        (set-strategic-number sn-camp-max-distance 15)

        (set-strategic-number sn-mill-max-distance 15)
        (set-strategic-number sn-enemy-sighted-response-distance 15)
        (set-strategic-number sn-group-form-distance 10)

        (set-strategic-number sn-town-defend-priority 7)
        (set-strategic-number sn-nova-defend-priority 2)
        (set-strategic-number sn-metal-defend-priority 3)
        (set-strategic-number sn-forage-defend-priority 0)

        (disable-self)
)

(defrule
        (true)
=>
        (set-strategic-number sn-holocron-defend-priority 0)
        (set-strategic-number sn-cap-civilian-gatherers 100)
        (set-strategic-number sn-percent-civilian-gatherers 0)

        (set-strategic-number sn-minimum-civilian-explorers 0)
        (set-strategic-number sn-cap-civilian-explorers 0)
        (set-strategic-number sn-percent-civilian-explorers 0)

        (set-strategic-number sn-cap-civilian-builders 12)
        (set-strategic-number sn-percent-civilian-builders 100)

        (disable-self)
)

(defrule
        (game-time > 600)
=>
        (set-strategic-number sn-blot-exploration-map 1)
        (disable-self)
)

(defrule
        (building-type-count BLDG-TRAINHEAVY >= 3)
        (building-type-count BLDG-GOVTCTR >= 3)
        (or
                (or
                        (carbon-amount < 5000)
                        (food-amount < 5000)
                )
                (or
                        (nova-amount < 3000)
                        (metal-amount < 3000)
                )
        )
=>
        (set-strategic-number sn-percent-civilian-builders 15)
        (set-strategic-number sn-percent-civilian-gatherers 85)
        (enable-timer t-carbonctr 1)
        (disable-self)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers == 85)
        (or
                (or
                        (carbon-amount < 1000)
                        (food-amount < 1000)
                )
                (or
                        (nova-amount < 500)
                        (metal-amount < 500)
                )
        )
=>
        (set-strategic-number sn-percent-civilian-builders 10)
        (set-strategic-number sn-percent-civilian-gatherers 90)
        (disable-self)
)

; worker count
(defrule
        (can-train UNIT-WORKER)
        (or
                (or
                        (civilian-population < 6)
                        (and
                                (current-age == tech-level-2)
                                (civilian-population < 8)
                        )
                )
                (or
                        (and
                                (current-age == tech-level-3)
                                (civilian-population < 10)
                        )
                        (and
                                (current-age == tech-level-4)
                                (civilian-population < civ-dark-rush)
                        )
                )
        )
=>
        (train UNIT-WORKER)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers == 90)
        (civilian-population < civ-castle)
        (can-train UNIT-WORKER)
=>
        (train UNIT-WORKER)
)

(defrule
        (nursery-headroom == 0)
    (building-type-count BLDG-MAIN > 0)
    (can-build BLDG-DROPANIM)
=>
    (build BLDG-DROPANIM)
)

(defrule
        (true)
=>
        (enable-timer t-powerup 1)
        (disable-self)
)

(defrule
        (timer-triggered t-powerup)
        (too-many-unpowered-buildings)
        (can-build BLDG-POWERCORE)
=>
        (build BLDG-POWERCORE)
)

(defrule
        (timer-triggered t-powerup)
        (too-many-unpowered-buildings)
        (not (can-build BLDG-POWERCORE))
        (can-build-with-escrow BLDG-POWERCORE)
=>
        (release-escrow carbon)
        (build BLDG-POWERCORE)
)

(defrule
        (timer-triggered t-powerup)
=>
        (disable-timer t-powerup)
        (enable-timer t-powerup 60)
)

(defrule
        (building-type-count-total BLDG-DROPCARBON > 0)
        (or     (and    (building-type-count-total BLDG-FARM < 6)
                                (current-age == tech-level-1)
                )
                (current-age >= tech-level-2)
        )
        (idle-farm-count == 0)
        (sheep-and-forage-too-far)
        (can-build BLDG-FARM)
=>
        (build BLDG-FARM)
)

;*********************************
;age advancement
(defrule
        (can-research tech-level-2)
        (or
                (players-current-age every-human >= tech-level-2)
                (difficulty <= moderate)
        )
=>
        (research tech-level-2)
        (set-goal age-advancement NOTICE)
        (enable-timer t-ageup 140)
)

(defrule
        (current-age == tech-level-2)
=>
        (disable-timer t-ageup)
        (set-goal age-advancement NO)
        (disable-self)
)

(defrule
        (can-research tech-level-3)
        (or
                (difficulty <= moderate)
                (and
                        (players-current-age every-human == tech-level-3)
                        (difficulty == easy)
                )
        )
=>
        (research tech-level-3)
        (set-goal age-advancement NOTICE)
        (enable-timer t-ageup 170)
)

(defrule
        (current-age == tech-level-3)
=>
        (disable-timer t-ageup)
        (set-goal age-advancement NO)
        (disable-self)
)

(defrule
        (can-research tech-level-4)
        (or
                (difficulty <= moderate)
                (and
                        (players-current-age every-human == tech-level-4)
                        (difficulty == easy)
                )
        )
=>
        (research tech-level-4)
        (set-goal age-advancement NOTICE)
        (enable-timer t-ageup 200)
)

(defrule
        (difficulty <= moderate)
        (current-age == tech-level-4)
=>
        (disable-timer t-ageup)
        (set-goal age-advancement NO)
        (disable-self)
)

(defrule
        (goal age-advancement NOTICE)
        (or
                (current-age < tech-level-4)
                (and
                        (current-age < tech-level-4)
                        (difficulty <= easy)
                )
        )
        (timer-triggered t-ageup)
=>
        (disable-timer t-ageup)
        (set-goal age-advancement NO)
)
;*********************************
;buildings
(defrule
        (difficulty <= moderate)
        (building-type-count-total BLDG-PREFAB <= fifteen-percent-pop)
        (can-build BLDG-PREFAB)
=>
        (build BLDG-PREFAB)
)

#load-if-defined DIFFICULTY-EASIEST
(defrule
        (military-population < 10)
        (housing-headroom < 5)
        (population-headroom > 0)
        (can-build BLDG-PREFAB)
=>
        (build BLDG-PREFAB)
)
#end-if

#load-if-defined DIFFICULTY-EASY
(defrule
        (military-population < civ-dark-rush)
        (housing-headroom < 5)
        (population-headroom > 0)
        (can-build BLDG-PREFAB)
=>
        (build BLDG-PREFAB)
)
#end-if

(defrule
        (strategic-number sn-nova-gatherer-percentage > 0)
        (building-type-count BLDG-DROPNOVA == 0)
        (resource-found nova)
        (can-build BLDG-DROPNOVA)
=>
        (build BLDG-DROPNOVA)
)

(defrule
        (strategic-number sn-carbon-gatherer-percentage > 0)
        (building-type-count BLDG-DROPCARBON == 0)
        (can-build BLDG-DROPCARBON)
=>
        (build BLDG-DROPCARBON)
)

(defrule
        (current-age == tech-level-4)
        (building-type-count BLDG-TRAINHEAVY > 0)
        (building-type-count BLDG-GOVTCTR > 0)
        (building-type-count BLDG-MAIN < 3)
        (can-build BLDG-MAIN)
=>
        (build BLDG-MAIN)
)

;build the following after running low on resources

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (timer-triggered t-carbonctr)
        (resource-found nova)
        (resource-found metal)
        (or
                (dropsite-min-distance nova > 7)
                (dropsite-min-distance metal > 7)
        )
        (can-build BLDG-MAIN)
=>
        (build BLDG-MAIN)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (timer-triggered t-carbonctr)
        (resource-found carbon)
        (dropsite-min-distance carbon > 7)
        (can-build BLDG-MAIN)
=>
        (build BLDG-MAIN)
)

(defrule
        (timer-triggered t-carbonctr)
=>
        (disable-timer t-carbonctr)
        (enable-timer t-carbonctr 60)
)

(defrule
        (building-type-count-total BLDG-DROPCHOW == 0)
        (building-type-count-total BLDG-SPACEPORT == 0)
        (can-build BLDG-DROPCHOW)
=>
        (build BLDG-DROPCHOW)
)

(defrule
        (building-type-count-total BLDG-SPACEPORT == 0)
        (can-build BLDG-SPACEPORT)
=>
        (build BLDG-SPACEPORT)
)

(defrule
        (building-type-count-total BLDG-TRAINJEDI < 3)
        (can-build BLDG-TRAINJEDI)
=>
        (build BLDG-TRAINJEDI)
)

(defrule
        (can-build BLDG-TRAINTROOPER)
        (building-type-count-total BLDG-TRAINTROOPER < 2)
=>
        (build BLDG-TRAINTROOPER)
)

(defrule
        (or
                (or
                        (building-type-count-total BLDG-TRAINTROOPER == 2)
                        (or
                                (building-type-count-total BLDG-TRAINAIR == 2)
                                (building-type-count-total BLDG-TRAINMECH == 2)
                        )
                )
                (or
                        (and
                                (building-type-count-total BLDG-TRAINHEAVY > 1)
                                (building-type-count-total BLDG-TRAINHEAVY < 4)
                        )
                        (and
                                (building-type-count-total BLDG-GOVTCTR > 2)
                                (building-type-count-total BLDG-GOVTCTR < 5)
                        )
                )
        )
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-POWERCORE)
=>
        (build-forward BLDG-POWERCORE)
)

(defrule
        (or
                (or
                        (building-type-count-total BLDG-TRAINTROOPER == 2)
                        (or
                                (building-type-count-total BLDG-TRAINAIR == 2)
                                (building-type-count-total BLDG-TRAINMECH == 2)
                        )
                )
                (or
                        (and
                                (building-type-count-total BLDG-TRAINHEAVY > 1)
                                (building-type-count-total BLDG-TRAINHEAVY < 4)
                        )
                        (and
                                (building-type-count-total BLDG-GOVTCTR > 2)
                                (building-type-count-total BLDG-GOVTCTR < 5)
                        )
                )
        )
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-SHLDGEN)
=>
        (build-forward BLDG-SHLDGEN)
)

(defrule
        (building-type-count-total BLDG-TRAINTROOPER == 2)
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-TRAINTROOPER)
=>
        (build-forward BLDG-TRAINTROOPER)
)

(defrule
        (building-type-count-total BLDG-TRAINAIR < 2)
        (can-build BLDG-TRAINAIR)
=>
        (build BLDG-TRAINAIR)
)

(defrule
        (building-type-count-total BLDG-TRAINAIR == 2)
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-TRAINAIR)
=>
        (build-forward BLDG-TRAINAIR)
)

(defrule
        (building-type-count-total BLDG-TRAINMECH < 2)
        (can-build BLDG-TRAINMECH)
=>
        (build BLDG-TRAINMECH)
)

(defrule
        (building-type-count-total BLDG-TRAINMECH == 2)
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-TRAINMECH)
=>
        (build-forward BLDG-TRAINMECH)
)

(defrule
        (building-type-count-total BLDG-POWERCORE > 0)
        (building-type-count-total BLDG-SHLDGEN < 5)
        (can-build BLDG-SHLDGEN)
=>
        (build BLDG-SHLDGEN)
)

(defrule
        (building-type-count-total BLDG-TRAINHEAVY < 2)
        (can-build BLDG-TRAINHEAVY)
=>
        (build BLDG-TRAINHEAVY)
)

(defrule
        (building-type-count-total BLDG-TRAINHEAVY > 1)
        (building-type-count-total BLDG-TRAINHEAVY < 4)
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-TRAINHEAVY)
=>
        (build-forward BLDG-TRAINHEAVY)
)

(defrule
        (building-type-count-total BLDG-GOVTCTR < 3)
        (can-build BLDG-GOVTCTR)
=>
        (build BLDG-GOVTCTR)
)

(defrule
        (building-type-count-total BLDG-GOVTCTR > 2)
        (building-type-count-total BLDG-GOVTCTR < 5)
        (unit-type-count UNIT-WORKER > 6)
        (can-build BLDG-GOVTCTR)
=>
        (build-forward BLDG-GOVTCTR)
)

(defrule
        (or
                (and
                        (goal 1 1)
                        (building-type-count-total BLDG-TRAINBOAT < 2)
                )
                (and
                        (goal 1 10)
                        (building-type-count-total BLDG-TRAINBOAT < 4)
                )
        )
        (can-build BLDG-TRAINBOAT)
=>
        (build BLDG-TRAINBOAT)
)

(defrule
        (building-type-count-total BLDG-WARCTR < 2)
        (can-build BLDG-WARCTR)
=>
        (build BLDG-WARCTR)
)

(defrule
        (building-type-count-total BLDG-RESCTR == 0)
        (can-build BLDG-RESCTR)
=>
        (build BLDG-RESCTR)
)
;*****************************************
;UPGRADES

(defrule
        (civ-selected REBEL)
        (current-age >= tech-level-4)
        (can-research ut-airspeeder)
        =>
        (research ut-airspeeder)
)

(defrule
        (civ-selected EMPIRE)
        (current-age >= tech-level-4)
        (can-research ut-dark-trooper)
        =>
        (research ut-dark-trooper)
)

(defrule
        (civ-selected NABOO)
        (current-age >= tech-level-4)
        (can-research ut-royal-knight)
        =>
        (research ut-royal-knight)
)

(defrule
        (civ-selected WOOKIEES)
        (current-age >= tech-level-4)
        (can-research ut-berserker)
        =>
        (research ut-berserker)
)

(defrule
        (civ-selected GUNGANS)
        (current-age >= tech-level-4)
        (can-research ut-faamba-shield-gen)
        =>
        (research ut-faamba-shield-gen)
)

(defrule
        (civ-selected FEDERATION)
        (current-age >= tech-level-4)
        (can-research ut-destroyer-droid)
        =>
        (research ut-destroyer-droid)
)

;; SHIPYARD ;;
;LASER2
(defrule
        (not (goal 1 0) )
        (can-research ut-boat-laser-2)
=>
    (research ut-boat-laser-2)
)

;LASER3
(defrule
        (not (goal 1 0) )
        (can-research ut-boat-laser-3)
=>
    (research ut-boat-laser-3)
)

;CUTLASER2
(defrule
        (not (goal 1 0) )
        (can-research ut-boat-cutlaser-2)
=>
    (research ut-boat-cutlaser-2)
)

;MISSILE2
(defrule
        (not (goal 1 0) )
        (goal military-parity NO)
        (can-research ut-boat-missile-2)
=>
    (research ut-boat-missile-2)
)

;ARTILLERY2
(defrule
        (not (goal 1 0) )
        (can-research ut-boat-artillery-2)
=>
    (research ut-boat-artillery-2)
)


;TROOP CENTER UPGRADES

;LASER2
(defrule
        (or
                (goal 36 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 36 2)
                )
        )
        (can-research ut-laser-2)
=>
        (research ut-laser-2)
)

;LASER3
(defrule
        (or
                (goal 36 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 36 2)
                )
        )
        (can-research ut-laser-3)
=>
    (research ut-laser-3)
)

;LASER4
(defrule
        (or
                (goal 36 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 36 2)
                )
        )
        (can-research ut-laser-4)
=>
    (research ut-laser-4)
)

;MOUNTED2
(defrule
        (unit-type-count UNIT-MOUNTED1 > 0)
        (can-research ut-mounted-2)
=>
    (research ut-mounted-2)
)

;MOUNTED3
(defrule
        (unit-type-count UNIT-MOUNTED2 > 0)
        (can-research ut-mounted-3)
=>
    (research ut-mounted-3)
)

;MISSILE2
(defrule
        (can-research ut-missile-troop-2)
=>
        (research ut-missile-troop-2)
)

(defrule
        (can-research rt-macrobinoculars)
        (not (goal 36 NO) )
=>
        (research rt-macrobinoculars)
)

(defrule
        (can-research rt-portable-scanners)
        (not (goal 36 NO) )
=>
        (research rt-portable-scanners)
)

(defrule
        (can-research rt-farseein-binoculars)
        (not (goal 36 NO) )
=>
        (research rt-farseein-binoculars)
)

(defrule
        (can-research rt-lighter-armor)
        (not (goal 36 NO) )
=>
        (research rt-lighter-armor)
)

;MECH FACTORY

;MECH2
(defrule
        (or
                (goal 37 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 37 2)
                )
        )
        (can-research ut-dual-mech-2)
=>
    (research ut-dual-mech-2)
)

;FASTBIKE

;MECH1

(defrule
        (can-research ut-single-mech-2)
=>
        (research ut-single-mech-2)
)

;MECH3
(defrule
        (or
                (goal 38 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 38 2)
                )
        )
        (can-research ut-multi-mech-2)
=>
    (research ut-multi-mech-2)
)

(defrule
        (can-research rt-upgraded-generators)
        (not (goal 37 NO) )
=>
        (research rt-upgraded-generators)
)

(defrule
        (can-research rt-adv-generator)
        (not (goal 37 NO) )
=>
        (research rt-adv-generator)
)

(defrule
        (can-research rt-goonga-armor)
        (nand
                (goal 37 NO)
                (goal 38 NO)
        )
=>
        (research rt-goonga-armor)
)

(defrule
        (can-research rt-adv-redesign)
        (nand
                (goal 37 NO)
                (goal 38 NO)
        )
=>
        (research rt-adv-redesign)
)

(defrule
        (can-research rt-wookiee-mechanics)
        (nand
                (goal 37 NO)
                (goal 38 NO)
        )
=>
        (research rt-wookiee-mechanics)
)

;AIRBASE
(defrule
        (or
                (goal 39 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 39 2)
                )
        )
        (can-research ut-fighter-2)
=>
    (research ut-fighter-2)
)

(defrule
        (or
                (goal 39 YES)
                (and
                        (building-type-count BLDG-GOVTCTR == 0)
                        (goal 39 2)
                )
        )
        (can-research ut-fighter-3)
=>
    (research ut-fighter-3)
)

(defrule
        (unit-type-count UNIT-BOMBER1 > 0)
        (can-research ut-bomber-2)
=>
    (research ut-bomber-2)
)

(defrule
        (unit-type-count UNIT-BOMBER2 > 0)
        (can-research ut-bomber-3)
=>
    (research ut-bomber-3)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-enlarged-bomb-hold)
=>
        (research rt-enlarged-bomb-hold)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-drafted-labor)
=>
        (research rt-drafted-labor)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-flight-school)
=>
        (research rt-flight-school)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-shield-mods)
=>
        (research rt-shield-mods)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-adv-flight-school)
=>
        (research rt-adv-flight-school)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-armor-plating)
=>
        (research rt-armor-plating)
)

(defrule
        (nand
                (goal 38 NO)
                (goal 39 NO)
        )
        (can-research rt-lighter-material)
=>
        (research rt-lighter-material)
)

;SIEGE EQUIPMENT
(defrule
        (or
                (goal combat-arm TROOPS)
                (goal combat-arm FIGHTER)
        )
        (can-research ut-missile-launcher-2)
=>
    (research ut-missile-launcher-2)
)

(defrule
        (or
                (or
                        (cc-players-building-type-count any-enemy BLDG-MAIN > 2)
                        (cc-players-building-type-count any-enemy BLDG-TURRET3 > 1)
                )
                (or
                        (cc-players-building-type-count any-enemy BLDG-MISSILE-LINE > 0)
                        (cc-players-building-type-count any-enemy BLDG-GOVTCTR > 0)
                )
        )
        (can-research ut-ram-2)
=>
        (research ut-ram-2)
)

(defrule
        (can-research ut-artillery-2)
=>
    (research ut-artillery-2)
)

;*********************************************************
;UNIT PRODUCTION

(defrule
        (or
                (or
                        (carbon-amount < 5000)
                        (food-amount < 5000)
                )
                (or
                        (nova-amount < 2000)
                        (metal-amount < 700)
                )
        )
=>
        (set-goal need-deathmatch-villagers YES)
        (disable-self)
)

(defrule
        (goal switch-laser-mounted TROOPS)
        (not (civ-selected FEDERATION))
        (can-train UNIT-LASER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train UNIT-LASER-LINE)
        (set-goal switch-laser-mounted MOUNTED)
)

#load-if-defined FEDERATION

(defrule
        (goal switch-laser-mounted TROOPS)
        (current-age == tech-level-1)
        (can-train UNIT-LASER-LINE)
        (military-population < civ-dark-rush)
        (not (goal 36 NO) )
=>
        (train UNIT-LASER-LINE)
        (set-goal switch-laser-mounted MOUNTED)
)

(defrule
        (goal switch-laser-mounted TROOPS)
        (current-age == tech-level-2)
        (can-train UNIT-LASER-LINE)
        (population < civ-feudal-rush)
        (not (goal 36 NO) )
=>
        (train UNIT-LASER-LINE)
        (set-goal switch-laser-mounted MOUNTED)
)

(defrule
        (goal switch-laser-mounted TROOPS)
        (current-age >= tech-level-3)
        (can-train UNIT-LASER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train UNIT-LASER-LINE)
        (set-goal switch-laser-mounted MOUNTED)
)

#end-if

(defrule
        (goal switch-laser-mounted MOUNTED)
        (not (civ-selected FEDERATION))
        (can-train UNIT-MOUNTED-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train UNIT-MOUNTED-LINE)
        (set-goal switch-laser-mounted TROOPS)
)

#load-if-defined FEDERATION

(defrule
        (goal switch-laser-mounted MOUNTED)
        (current-age == tech-level-1)
        (can-train UNIT-MOUNTED-LINE)
        (military-population < civ-dark-rush)
        (not (goal 36 NO) )
=>
        (train UNIT-MOUNTED-LINE)
        (set-goal switch-laser-mounted TROOPS)
)

(defrule
        (goal switch-laser-mounted MOUNTED)
        (current-age == tech-level-2)
        (can-train UNIT-MOUNTED-LINE)
        (population < civ-feudal-rush)
        (not (goal 36 NO) )
=>
        (train UNIT-MOUNTED-LINE)
        (set-goal switch-laser-mounted TROOPS)
)

(defrule
        (goal switch-laser-mounted MOUNTED)
        (current-age >= tech-level-3)
        (can-train UNIT-MOUNTED-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train UNIT-MOUNTED-LINE)
        (set-goal switch-laser-mounted TROOPS)
)

#end-if

(defrule
        (not (civ-selected FEDERATION))
        (can-train BOAT-LASER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train BOAT-LASER-LINE)
)

#load-if-defined FEDERATION

(defrule
        (current-age == tech-level-2)
        (can-train BOAT-LASER-LINE)
        (population < civ-feudal-rush)
        (not (goal 36 NO) )
=>
        (train BOAT-LASER-LINE)
)

(defrule
        (current-age >= tech-level-3)
        (can-train BOAT-LASER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train BOAT-LASER-LINE)
)

#end-if

(defrule
        (can-train BOAT-CUTLASER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train BOAT-CUTLASER-LINE)
)

(defrule
        (or
                (cc-players-unit-type-count any-enemy UNIT-FIGHTER-LINE > 0)
                (cc-players-unit-type-count any-enemy UNIT-BOMBER-LINE > 0)
        )
        (can-train BOAT-MISSILE-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train BOAT-MISSILE-LINE)
)

(defrule
        (can-train BOAT-ARTILLERY-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 36 NO) )
=>
        (train BOAT-ARTILLERY-LINE)
)

(defrule
        (difficulty == easy)
        (unit-type-count UNIT-MECH3-LINE < 1)
        (can-train UNIT-MECH3-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-MECH3-LINE)
)

(defrule
        (difficulty == moderate)
        (unit-type-count UNIT-MECH3-LINE < 3)
        (can-train UNIT-MECH3-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-MECH3-LINE)
)

(defrule
        (difficulty <= hard)
        (unit-type-count UNIT-MECH3-LINE < 5)
        (can-train UNIT-MECH3-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-MECH3-LINE)
)

(defrule
        (can-train UNIT-MECH1-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-MECH1-LINE)
)

(defrule
        (can-train UNIT-MECH2-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-MECH2-LINE)
)

(defrule
        (can-train SIEGE-RAM-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 37 NO) )
=>
        (train SIEGE-RAM-LINE)
)

(defrule
        (can-train SIEGE-ARTILLERY-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 37 NO) )
=>
        (train SIEGE-ARTILLERY-LINE)
)

(defrule
        (or
                (cc-players-unit-type-count any-enemy UNIT-FIGHTER-LINE > 0)
                (cc-players-unit-type-count any-enemy UNIT-BOMBER-LINE > 0)
        )
        (can-train SIEGE-MISSILE-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 37 NO) )
=>
        (train SIEGE-MISSILE-LINE)
)

(defrule
        (can-train UNIT-FIGHTER-LINE)
;       (not (unit-available hand-cannoneer) )
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 39 NO) )
=>
        (train UNIT-FIGHTER-LINE)
)

(defrule
        (building-type-count BLDG-GOVTCTR > 0)
        (unit-type-count-total UNIT-BOUNTY <= 5)
        (can-train UNIT-BOUNTY)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
        (not (goal 39 NO) )
=>
        (train UNIT-BOUNTY)
)

(defrule
        (can-train UNIT-AIRSPEEDER-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-AIRSPEEDER-LINE)
        (set-goal secondary-build 1)
)

(defrule
        (can-train UNIT-DARKTRP-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-DARKTRP-LINE)
        (set-goal secondary-build 1)
)

(defrule
        (can-train UNIT-KNIGHT-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-KNIGHT-LINE)
        (set-goal secondary-build 1)
)

(defrule
        (can-train UNIT-BERSERK-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-BERSERK-LINE)
        (set-goal secondary-build 1)
)

(defrule
        (can-train UNIT-SHIELD-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-SHIELD-LINE)
        (set-goal secondary-build 1)
)

(defrule
        (can-train UNIT-DESTDROID-LINE)
        (or
                (population < deathmatch-unit-max)
                (and
                        (population < unit-max)
                        (goal need-deathmatch-villagers NO)
                )
        )
=>
        (train UNIT-DESTDROID-LINE)
        (set-goal secondary-build 1)
)

; jedi
(defrule
        (or
                (not (civ-selected FEDERATION))
                (current-age >= tech-level-3)
        )
        (unit-type-count-total UNIT-JEDI-LINE < five-percent-pop)
        (goal jedi-rating POOR)
        (can-train UNIT-JEDI-LINE)
=>
        (train UNIT-JEDI-LINE)
)

(defrule
        (civ-selected FEDERATION)
        (unit-type-count-total UNIT-JEDI-LINE < five-percent-pop)
        (current-age == tech-level-2)
        (population < civ-feudal-rush)
        (can-train UNIT-JEDI-LINE)
=>
        (train UNIT-JEDI-LINE)
)

(defrule
        (unit-type-count-total UNIT-JEDI-LINE < five-percent-pop)
        (goal jedi-rating FAIR)
        (can-train UNIT-JEDI-LINE)
=>
        (train UNIT-JEDI-LINE)
)

(defrule
        (unit-type-count-total UNIT-JEDI-LINE < ten-percent-pop)
        (goal jedi-rating GOOD)
        (can-train UNIT-JEDI-LINE)
=>
        (train UNIT-JEDI-LINE)
)
;*********************************************
;WAR CENTER
;first level upgrades
(defrule
        (can-research rt-primary-focus-coils)
        (nand
                (goal 36 NO)
                (goal 37 NO)
        )
=>
        (research rt-primary-focus-coils)
)

(defrule
        (can-research rt-elevation-tracking)
        (or
                (nand
                        (goal 38 NO)
                        (goal 39 NO)
                )
                (or
                        (building-type-count-total BLDG-TURRET1 > 0)
                        (unit-type-count-total BOAT-LASER2 > 0)
                )
        )
=>
        (research rt-elevation-tracking)
)

(defrule
        (can-research rt-basic-armor)
        (not (goal 36 NO) )
=>
        (research rt-basic-armor)
)

(defrule
        (can-research rt-light-plating)
        (not (goal 37 NO) )
=>
        (research rt-light-plating)
)

;second upgrades
(defrule
        (can-research rt-cooling-sleeves)
        (nand
                (goal 36 NO)
                (goal 37 NO)
        )
=>
        (research rt-cooling-sleeves)
)

(defrule
        (can-research rt-external-sensor-pod)
        (or
                (nand
                        (goal 38 NO)
                        (goal 39 NO)
                )
                (or
                        (building-type-count-total BLDG-TURRET1 > 0)
                        (unit-type-count-total BOAT-LASER2 > 0)
                )
        )
=>
        (research rt-external-sensor-pod)
)

(defrule
        (can-research rt-light-armor)
        (not (goal 36 NO) )
=>
        (research rt-light-armor)
)

(defrule
        (can-research rt-medium-plating)
        (not (goal 37 NO) )
=>
        (research rt-medium-plating)
)

;third upgrades
(defrule
        (can-research rt-adv-power-pack)
        (nand
                (goal 36 NO)
                (goal 37 NO)
        )
=>
        (research rt-adv-power-pack)
)

(defrule
        (can-research rt-targetting-sensors)
        (or
                (nand
                        (goal 38 NO)
                        (goal 39 NO)
                )
                (or
                        (building-type-count-total BLDG-TURRET1 > 0)
                        (unit-type-count-total BOAT-LASER2 > 0)
                )
        )
=>
        (research rt-targetting-sensors)
)

(defrule
        (can-research rt-heavy-armor)
        (not (goal 36 NO) )
=>
        (research rt-heavy-armor)
)

(defrule
        (can-research rt-heavy-plating)
        (not (goal 37 NO) )
=>
        (research rt-heavy-plating)
)

(defrule
        (can-research rt-tougher-armor)
        (not (goal 36 NO) )
=>
        (research rt-tougher-armor)
)

;RESEARCH CENTER

; sentry post
(defrule
        (building-type-count-total BLDG-TURRET1 > 2)
        (can-research ut-medium-turret)
=>
        (research ut-medium-turret)
)

(defrule
        (building-type-count-total BLDG-TURRET2 > 2)
        (can-research ut-adv-turret)
=>
        (research ut-adv-turret)
)

(defrule
        (can-research ut-adv-missile-turret)
=>
        (research ut-adv-missile-turret)
)


;light wall
(defrule
        (goal wall-build YES)
        (can-research ut-heavy-wall)
=>
        (research ut-heavy-wall)
)

(defrule
        (goal wall-build YES)
        (can-research ut-shield-wall)
=>
        (research ut-shield-wall)
)

;shipyard
(defrule
        (not (goal 1 0) )
        (can-research rt-redesigned-specs)
=>
        (research rt-redesigned-specs)
)

(defrule
        (not (goal 1 0) )
        (can-research rt-adv-propulsion)
=>
        (research rt-adv-propulsion)
)

(defrule
        (not (goal 1 0) )
        (can-research rt-redoubled-efforts)
=>
        (research rt-redoubled-efforts)
)


;gov center
(defrule
        (can-research rt-automated-processes)
=>
        (research rt-automated-processes)
)

(defrule
        (can-research rt-presidium)
=>
        (research rt-presidium)
)

;***********************************
;ECONOMIC UPGRADES
;***********************************
;nova processing center
(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-beamdrill-nova-mining)
=>
        (research rt-beamdrill-nova-mining)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-hvy-beamdrill-nova)
=>
        (research rt-hvy-beamdrill-nova)
)


;metal processing center
(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-beamdrill-metal)
=>
        (research rt-beamdrill-metal)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-heavy-beamdrill-metal)
=>
        (research rt-heavy-beamdrill-metal)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-fusion-extractor)
=>
        (research rt-fusion-extractor)
)

;research center
(defrule
        (can-research rt-durasteel)
=>
        (research rt-durasteel)
)

(defrule
        (can-research rt-permacite-plating)
=>
        (research rt-permacite-plating)
)

(defrule
        (can-research rt-tracking-computer)
=>
        (research rt-tracking-computer)
)

(defrule
        (can-research rt-homing-sensors)
=>
        (research rt-homing-sensors)
)

(defrule
        (player-in-game any-ally)
        (can-research rt-holonet)
=>
        (research rt-holonet)
)

(defrule
        (can-research rt-hvy-weapons-engineers)
=>
        (research rt-hvy-weapons-engineers)
)

(defrule
        (not (goal 1 0) )
        (can-research rt-ion-accelerator)
=>
        (research rt-ion-accelerator)
)


;command center
(defrule
        (can-research rt-sensor-beacon)
=>
        (research rt-sensor-beacon)
)

(defrule
        (can-research rt-sensor-array)
=>
        (research rt-sensor-array)
)

(defrule
        (current-age == tech-level-4)
        (can-research rt-basic-training)
=>
        (research rt-basic-training)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-upgraded-motivator)
=>
        (research rt-upgraded-motivator)
)

(defrule
        (strategic-number sn-percent-civilian-gatherers >= 85)
        (can-research rt-optimized-motivator)
=>
        (research rt-optimized-motivator)
)


;spaceport
(defrule
        (can-research rt-galactic-trade-comm)
=>
        (research rt-galactic-trade-comm)
)

(defrule
        (player-in-game any-ally)
        (can-research rt-hutt-endorsement)
=>
        (research rt-hutt-endorsement)
)

(defrule
        (player-in-game any-ally)
        (can-research rt-galactic-banking)
=>
        (research rt-galactic-banking)
)

;jedi temple
(defrule
        (can-research rt-faith-in-the-force)
        (or
                (cc-players-unit-type-count any-enemy UNIT-JEDI-LINE >= ten-percent-pop)
                (cc-players-unit-type-count any-enemy UNIT-JEDI-LINE > 10)
        )
=>
        (research rt-faith-in-the-force)
)

(defrule
        (difficulty <= moderate)
        (can-research rt-force-influence)
        (or
                (cc-players-unit-type-count any-enemy UNIT-JEDI-LINE > five-percent-pop)
                (cc-players-unit-type-count any-enemy UNIT-JEDI-LINE > 5)
        )
=>
        (research rt-force-influence)
)

(defrule
        (can-research rt-force-strong)
        (unit-type-count UNIT-JEDI-LINE > five-percent-pop)
=>
        (research rt-force-strong)
)

(defrule
        (can-research rt-jedi-stamina)
        (unit-type-count UNIT-JEDI-LINE > 1)
=>
        (research rt-jedi-stamina)
)

(defrule
        (can-research rt-jedi-agility)
        (unit-type-count UNIT-JEDI-LINE > 1)
=>
        (research rt-jedi-agility)
)

(defrule
        (difficulty <= moderate)
        (can-research rt-jedi-concentration)
        (unit-type-count UNIT-JEDI-LINE > five-percent-pop)
=>
        (research rt-jedi-concentration)
)

(defrule
        (can-research rt-jedi-strength)
        (unit-type-count UNIT-JEDI-LINE > 1)
=>
        (research rt-jedi-strength)
)

;(defrule
;       (can-research rt-jedi-power)
;       (unit-type-count UNIT-JEDI-LINE > 1)
;=>
;       (research rt-jedi-power)
;)
(defrule
        (can-research rt-jedi-perception)
        (unit-type-count UNIT-JEDI-LINE > 1)
=>
        (research rt-jedi-perception)
)
(defrule
        (can-research rt-jedi-mind-trick)
        (unit-type-count UNIT-JEDI-LINE > 1)
=>
        (research rt-jedi-mind-trick)
)

;***********************************
;TRADING
;***********************************
(defrule
        (carbon-amount > 5000)
        (commodity-selling-price carbon >= 20)
        (can-sell-commodity carbon)
=>
        (sell-commodity carbon)
)

(defrule
        (food-amount > 5000)
        (commodity-selling-price food >= 20)
        (can-sell-commodity food)
=>
        (sell-commodity food)
)

(defrule
        (nova-amount < 1200)
        (carbon-amount > 5000)
        (can-sell-commodity carbon)
=>
        (sell-commodity carbon)
)

(defrule
        (nova-amount < 1200)
        (food-amount > 5000)
        (can-sell-commodity food)
=>
        (sell-commodity food)
)

(defrule
        (nova-amount < 1200)
        (metal-amount > 1000)
        (building-type-count-total BLDG-GOVTCTR >= 5)
        (can-sell-commodity metal)
=>
        (sell-commodity metal)
)

(defrule
        (metal-amount < 650)
        (nova-amount > 5000)
        (building-type-count-total BLDG-GOVTCTR < 5)
        (can-buy-commodity metal)
=>
        (buy-commodity metal)
)

(defrule
        (carbon-amount < 1100)
        (nova-amount > 5000)
        (can-buy-commodity carbon)
=>
        (buy-commodity carbon)
)

(defrule
        (food-amount < 1600)
        (nova-amount > 5000)
        (can-buy-commodity food)
=>
        (buy-commodity food)
)

;***********************************************
;MONUMENT

(defrule
        (current-age == tech-level-4)
=>
        (set-goal resource-needed NO)
)

(defrule
        (goal resource-supp FOOD-ONLY)
        (current-age == tech-level-4)
        (food-amount < 250)
=>
        (set-goal resource-needed FOOD)
)

(defrule
        (goal resource-supp NOVA-ONLY)
        (current-age == tech-level-4)
        (nova-amount < 475)
=>
        (set-goal resource-needed NOVA)
)

(defrule
        (goal resource-supp CARBON-FOOD)
        (current-age == tech-level-4) 
        (carbon-amount < 600)
        (food-amount > 500)
=>
        (set-goal resource-needed CARBON)
)

(defrule
        (goal resource-supp CARBON-FOOD)
        (current-age == tech-level-4) 
        (carbon-amount > 600)
        (food-amount < 500)
=>
        (set-goal resource-needed FOOD)
)

(defrule
        (goal resource-supp CARBON-NOVA)
        (current-age == tech-level-4) 
        (carbon-amount > 525)
        (nova-amount < 500)
=>
        (set-goal resource-needed NOVA)
)

(defrule
        (goal resource-supp CARBON-NOVA)
        (current-age == tech-level-4) 
        (carbon-amount < 525)
        (nova-amount > 500)
=>
        (set-goal resource-needed CARBON)
)

(defrule
        (goal resource-supp CARBON-METAL)
        (current-age == tech-level-4) 
        (carbon-amount > 400)
        (metal-amount < 400)
=>
        (set-goal resource-needed METAL)
)

(defrule
        (goal resource-supp CARBON-METAL)
        (current-age == tech-level-4) 
        (carbon-amount < 400)
        (metal-amount > 400)
=>
        (set-goal resource-needed CARBON)
)

(defrule
        (goal resource-supp FOOD-NOVA)
        (current-age == tech-level-4) 
        (food-amount > 1600)
        (nova-amount < 1200)
=>
        (set-goal resource-needed NOVA)
)

(defrule
        (goal resource-supp FOOD-NOVA)
        (current-age == tech-level-4) 
        (food-amount < 1600)
        (nova-amount > 1200)
=>
        (set-goal resource-needed FOOD)
)

(defrule
        (goal resource-supp FOOD-METAL)
        (current-age == tech-level-4) 
        (food-amount > 500)
        (metal-amount < 350)
=>
        (set-goal resource-needed METAL)
)

(defrule
        (goal resource-supp FOOD-METAL)
        (current-age == tech-level-4) 
        (food-amount < 500)
        (metal-amount > 350)
=>
        (set-goal resource-needed FOOD)
)

(defrule
        (goal castle-attempt YES)
        (current-age == tech-level-4)
        (metal-amount < 650)
=>
        (set-goal resource-needed METAL)
)

(defrule
        (goal sea-owner YES)
        (current-age == tech-level-4)
        (warboat-count < twenty-percent-pop)
        (carbon-amount < 200)
        (nova-amount > 150)
=>
        (set-goal resource-needed CARBON)
)

(defrule
        (goal sea-owner YES)
        (current-age == tech-level-4)
        (warboat-count < twenty-percent-pop)
        (carbon-amount > 200)
        (nova-amount < 150)
=>
        (set-goal resource-needed NOVA)
)

(defrule
        (goal mech-rating GOOD)
        (or
                (goal resource-needed NO)
                (current-age == tech-level-4)
        )
        (carbon-amount < 1000)
        =>
        (set-goal resource-needed CARBON)
)

(defrule
        (goal mech-rating POOR)                                 ;good in air
        (or
                (goal resource-needed NO)
                (current-age == tech-level-4)
        )
        (nova-amount < 1000)
        =>
        (set-goal resource-needed NOVA)
)

(defrule
        (building-type-count-total BLDG-MONUMENT == 0)
        (carbon-amount < 3000)
        (nova-amount > 3000)
        (metal-amount > 3000)
=>
        (set-goal resource-needed CARBON)
)

(defrule
        (building-type-count-total BLDG-MONUMENT == 0)
        (carbon-amount > 3000)
        (nova-amount < 3000)
        (metal-amount > 3000)
=>
        (set-goal resource-needed NOVA)
)

(defrule
        (building-type-count-total BLDG-MONUMENT == 0)
        (carbon-amount > 3000)
        (nova-amount > 3000)
        (metal-amount < 3000)
=>
        (set-goal resource-needed METAL)
)

(defrule
        (goal resource-needed NO)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 30)
        (set-strategic-number sn-food-gatherer-percentage 30)
        (set-strategic-number sn-nova-gatherer-percentage 20)
        (set-strategic-number sn-metal-gatherer-percentage 20)
        (disable-self)
)

(defrule
        (goal resource-needed CARBON)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 50)
        (set-strategic-number sn-food-gatherer-percentage 30)
        (set-strategic-number sn-nova-gatherer-percentage 15)
        (set-strategic-number sn-metal-gatherer-percentage 5)
        (disable-self)
)

(defrule
        (goal resource-needed FOOD)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 30)
        (set-strategic-number sn-food-gatherer-percentage 50)
        (set-strategic-number sn-nova-gatherer-percentage 15)
        (set-strategic-number sn-metal-gatherer-percentage 5)
        (disable-self)
)

(defrule
        (goal resource-needed NOVA)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 25)
        (set-strategic-number sn-food-gatherer-percentage 30)
        (set-strategic-number sn-nova-gatherer-percentage 30)
        (set-strategic-number sn-metal-gatherer-percentage 15)
        (disable-self)
)

(defrule
        (goal resource-needed NOVA)
        (carbon-amount > 5000)
        (food-amount > 5000)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 0)
        (set-strategic-number sn-food-gatherer-percentage 0)
        (set-strategic-number sn-nova-gatherer-percentage 70)
        (set-strategic-number sn-metal-gatherer-percentage 30)
        (disable-self)
)

(defrule
        (goal resource-needed METAL)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 30)
        (set-strategic-number sn-food-gatherer-percentage 30)
        (set-strategic-number sn-nova-gatherer-percentage 25)
        (set-strategic-number sn-metal-gatherer-percentage 25)
        (disable-self)
)

(defrule
        (goal resource-needed METAL)
        (carbon-amount > 5000)
        (food-amount > 5000)
        (current-age == tech-level-4)
=>
        (set-strategic-number sn-carbon-gatherer-percentage 0)
        (set-strategic-number sn-food-gatherer-percentage 0)
        (set-strategic-number sn-nova-gatherer-percentage 25)
        (set-strategic-number sn-metal-gatherer-percentage 75)
        (disable-self)
)

#load-if-defined DIFFICULTY-HARD

(defrule
        (true)
=>
        (disable-timer t-chatmore)
        (enable-timer t-chatmore 300)
        (disable-self)
)

(defrule
        (timer-triggered t-chatmore)
=>
        (cc-add-resource carbon 500)
        (cc-add-resource food 500)
        (cc-add-resource nova 500)
        (cc-add-resource metal 500)
        (disable-timer t-chatmore)
        (enable-timer t-chatmore 300)
)

#end-if

#load-if-defined DIFFICULTY-HARDEST

(defrule
        (true)
=>
        (disable-timer t-chatmore)
        (enable-timer t-chatmore 300)
        (disable-self)
)

(defrule
        (timer-triggered t-chatmore)
=>
        (cc-add-resource carbon 1000)
        (cc-add-resource food 1000)
        (cc-add-resource nova 1000)
        (cc-add-resource metal 1000)
        (disable-timer t-chatmore)
        (enable-timer t-chatmore 300)
)

#end-if